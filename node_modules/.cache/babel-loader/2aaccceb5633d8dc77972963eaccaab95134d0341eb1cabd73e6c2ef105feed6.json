{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataConsumer = void 0;\nconst Logger_1 = require(\"./Logger\");\nconst enhancedEvents_1 = require(\"./enhancedEvents\");\nconst logger = new Logger_1.Logger('DataConsumer');\nclass DataConsumer extends enhancedEvents_1.EnhancedEventEmitter {\n  // Id.\n  _id;\n  // Associated DataProducer Id.\n  _dataProducerId;\n  // The underlying RTCDataChannel instance.\n  _dataChannel;\n  // Closed flag.\n  _closed = false;\n  // SCTP stream parameters.\n  _sctpStreamParameters;\n  // App custom data.\n  _appData;\n  // Observer instance.\n  _observer = new enhancedEvents_1.EnhancedEventEmitter();\n  constructor({\n    id,\n    dataProducerId,\n    dataChannel,\n    sctpStreamParameters,\n    appData\n  }) {\n    super();\n    logger.debug('constructor()');\n    this._id = id;\n    this._dataProducerId = dataProducerId;\n    this._dataChannel = dataChannel;\n    this._sctpStreamParameters = sctpStreamParameters;\n    this._appData = appData ?? {};\n    this.handleDataChannel();\n  }\n  /**\r\n   * DataConsumer id.\r\n   */\n  get id() {\n    return this._id;\n  }\n  /**\r\n   * Associated DataProducer id.\r\n   */\n  get dataProducerId() {\n    return this._dataProducerId;\n  }\n  /**\r\n   * Whether the DataConsumer is closed.\r\n   */\n  get closed() {\n    return this._closed;\n  }\n  /**\r\n   * SCTP stream parameters.\r\n   */\n  get sctpStreamParameters() {\n    return this._sctpStreamParameters;\n  }\n  /**\r\n   * DataChannel readyState.\r\n   */\n  get readyState() {\n    return this._dataChannel.readyState;\n  }\n  /**\r\n   * DataChannel label.\r\n   */\n  get label() {\n    return this._dataChannel.label;\n  }\n  /**\r\n   * DataChannel protocol.\r\n   */\n  get protocol() {\n    return this._dataChannel.protocol;\n  }\n  /**\r\n   * DataChannel binaryType.\r\n   */\n  get binaryType() {\n    return this._dataChannel.binaryType;\n  }\n  /**\r\n   * Set DataChannel binaryType.\r\n   */\n  set binaryType(binaryType) {\n    this._dataChannel.binaryType = binaryType;\n  }\n  /**\r\n   * App custom data.\r\n   */\n  get appData() {\n    return this._appData;\n  }\n  /**\r\n   * App custom data setter.\r\n   */\n  set appData(appData) {\n    this._appData = appData;\n  }\n  get observer() {\n    return this._observer;\n  }\n  /**\r\n   * Closes the DataConsumer.\r\n   */\n  close() {\n    if (this._closed) {\n      return;\n    }\n    logger.debug('close()');\n    this._closed = true;\n    this._dataChannel.close();\n    this.emit('@close');\n    // Emit observer event.\n    this._observer.safeEmit('close');\n  }\n  /**\r\n   * Transport was closed.\r\n   */\n  transportClosed() {\n    if (this._closed) {\n      return;\n    }\n    logger.debug('transportClosed()');\n    this._closed = true;\n    this._dataChannel.close();\n    this.safeEmit('transportclose');\n    // Emit observer event.\n    this._observer.safeEmit('close');\n  }\n  handleDataChannel() {\n    this._dataChannel.addEventListener('open', () => {\n      if (this._closed) {\n        return;\n      }\n      logger.debug('DataChannel \"open\" event');\n      this.safeEmit('open');\n    });\n    this._dataChannel.addEventListener('error', event => {\n      if (this._closed) {\n        return;\n      }\n      let {\n        error\n      } = event;\n      if (!error) {\n        error = new Error('unknown DataChannel error');\n      }\n      if (error.errorDetail === 'sctp-failure') {\n        logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);\n      } else {\n        logger.error('DataChannel \"error\" event: %o', error);\n      }\n      this.safeEmit('error', error);\n    });\n    this._dataChannel.addEventListener('close', () => {\n      if (this._closed) {\n        return;\n      }\n      logger.warn('DataChannel \"close\" event');\n      this._closed = true;\n      this.emit('@close');\n      this.safeEmit('close');\n      // Emit observer event.\n      this._observer.safeEmit('close');\n    });\n    this._dataChannel.addEventListener('message', event => {\n      if (this._closed) {\n        return;\n      }\n      this.safeEmit('message', event.data);\n    });\n  }\n}\nexports.DataConsumer = DataConsumer;","map":{"version":3,"names":["Object","defineProperty","exports","value","DataConsumer","Logger_1","require","enhancedEvents_1","logger","Logger","EnhancedEventEmitter","_id","_dataProducerId","_dataChannel","_closed","_sctpStreamParameters","_appData","_observer","constructor","id","dataProducerId","dataChannel","sctpStreamParameters","appData","debug","handleDataChannel","closed","readyState","label","protocol","binaryType","observer","close","emit","safeEmit","transportClosed","addEventListener","event","error","Error","errorDetail","sctpCauseCode","message","warn","data"],"sources":["D:/LECHUAN/NT114/DACN_2/DACN-FE/node_modules/mediasoup-client/lib/DataConsumer.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DataConsumer = void 0;\r\nconst Logger_1 = require(\"./Logger\");\r\nconst enhancedEvents_1 = require(\"./enhancedEvents\");\r\nconst logger = new Logger_1.Logger('DataConsumer');\r\nclass DataConsumer extends enhancedEvents_1.EnhancedEventEmitter {\r\n    // Id.\r\n    _id;\r\n    // Associated DataProducer Id.\r\n    _dataProducerId;\r\n    // The underlying RTCDataChannel instance.\r\n    _dataChannel;\r\n    // Closed flag.\r\n    _closed = false;\r\n    // SCTP stream parameters.\r\n    _sctpStreamParameters;\r\n    // App custom data.\r\n    _appData;\r\n    // Observer instance.\r\n    _observer = new enhancedEvents_1.EnhancedEventEmitter();\r\n    constructor({ id, dataProducerId, dataChannel, sctpStreamParameters, appData, }) {\r\n        super();\r\n        logger.debug('constructor()');\r\n        this._id = id;\r\n        this._dataProducerId = dataProducerId;\r\n        this._dataChannel = dataChannel;\r\n        this._sctpStreamParameters = sctpStreamParameters;\r\n        this._appData = appData ?? {};\r\n        this.handleDataChannel();\r\n    }\r\n    /**\r\n     * DataConsumer id.\r\n     */\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    /**\r\n     * Associated DataProducer id.\r\n     */\r\n    get dataProducerId() {\r\n        return this._dataProducerId;\r\n    }\r\n    /**\r\n     * Whether the DataConsumer is closed.\r\n     */\r\n    get closed() {\r\n        return this._closed;\r\n    }\r\n    /**\r\n     * SCTP stream parameters.\r\n     */\r\n    get sctpStreamParameters() {\r\n        return this._sctpStreamParameters;\r\n    }\r\n    /**\r\n     * DataChannel readyState.\r\n     */\r\n    get readyState() {\r\n        return this._dataChannel.readyState;\r\n    }\r\n    /**\r\n     * DataChannel label.\r\n     */\r\n    get label() {\r\n        return this._dataChannel.label;\r\n    }\r\n    /**\r\n     * DataChannel protocol.\r\n     */\r\n    get protocol() {\r\n        return this._dataChannel.protocol;\r\n    }\r\n    /**\r\n     * DataChannel binaryType.\r\n     */\r\n    get binaryType() {\r\n        return this._dataChannel.binaryType;\r\n    }\r\n    /**\r\n     * Set DataChannel binaryType.\r\n     */\r\n    set binaryType(binaryType) {\r\n        this._dataChannel.binaryType = binaryType;\r\n    }\r\n    /**\r\n     * App custom data.\r\n     */\r\n    get appData() {\r\n        return this._appData;\r\n    }\r\n    /**\r\n     * App custom data setter.\r\n     */\r\n    set appData(appData) {\r\n        this._appData = appData;\r\n    }\r\n    get observer() {\r\n        return this._observer;\r\n    }\r\n    /**\r\n     * Closes the DataConsumer.\r\n     */\r\n    close() {\r\n        if (this._closed) {\r\n            return;\r\n        }\r\n        logger.debug('close()');\r\n        this._closed = true;\r\n        this._dataChannel.close();\r\n        this.emit('@close');\r\n        // Emit observer event.\r\n        this._observer.safeEmit('close');\r\n    }\r\n    /**\r\n     * Transport was closed.\r\n     */\r\n    transportClosed() {\r\n        if (this._closed) {\r\n            return;\r\n        }\r\n        logger.debug('transportClosed()');\r\n        this._closed = true;\r\n        this._dataChannel.close();\r\n        this.safeEmit('transportclose');\r\n        // Emit observer event.\r\n        this._observer.safeEmit('close');\r\n    }\r\n    handleDataChannel() {\r\n        this._dataChannel.addEventListener('open', () => {\r\n            if (this._closed) {\r\n                return;\r\n            }\r\n            logger.debug('DataChannel \"open\" event');\r\n            this.safeEmit('open');\r\n        });\r\n        this._dataChannel.addEventListener('error', (event) => {\r\n            if (this._closed) {\r\n                return;\r\n            }\r\n            let { error } = event;\r\n            if (!error) {\r\n                error = new Error('unknown DataChannel error');\r\n            }\r\n            if (error.errorDetail === 'sctp-failure') {\r\n                logger.error('DataChannel SCTP error [sctpCauseCode:%s]: %s', error.sctpCauseCode, error.message);\r\n            }\r\n            else {\r\n                logger.error('DataChannel \"error\" event: %o', error);\r\n            }\r\n            this.safeEmit('error', error);\r\n        });\r\n        this._dataChannel.addEventListener('close', () => {\r\n            if (this._closed) {\r\n                return;\r\n            }\r\n            logger.warn('DataChannel \"close\" event');\r\n            this._closed = true;\r\n            this.emit('@close');\r\n            this.safeEmit('close');\r\n            // Emit observer event.\r\n            this._observer.safeEmit('close');\r\n        });\r\n        this._dataChannel.addEventListener('message', (event) => {\r\n            if (this._closed) {\r\n                return;\r\n            }\r\n            this.safeEmit('message', event.data);\r\n        });\r\n    }\r\n}\r\nexports.DataConsumer = DataConsumer;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACpD,MAAME,MAAM,GAAG,IAAIH,QAAQ,CAACI,MAAM,CAAC,cAAc,CAAC;AAClD,MAAML,YAAY,SAASG,gBAAgB,CAACG,oBAAoB,CAAC;EAC7D;EACAC,GAAG;EACH;EACAC,eAAe;EACf;EACAC,YAAY;EACZ;EACAC,OAAO,GAAG,KAAK;EACf;EACAC,qBAAqB;EACrB;EACAC,QAAQ;EACR;EACAC,SAAS,GAAG,IAAIV,gBAAgB,CAACG,oBAAoB,CAAC,CAAC;EACvDQ,WAAWA,CAAC;IAAEC,EAAE;IAAEC,cAAc;IAAEC,WAAW;IAAEC,oBAAoB;IAAEC;EAAS,CAAC,EAAE;IAC7E,KAAK,CAAC,CAAC;IACPf,MAAM,CAACgB,KAAK,CAAC,eAAe,CAAC;IAC7B,IAAI,CAACb,GAAG,GAAGQ,EAAE;IACb,IAAI,CAACP,eAAe,GAAGQ,cAAc;IACrC,IAAI,CAACP,YAAY,GAAGQ,WAAW;IAC/B,IAAI,CAACN,qBAAqB,GAAGO,oBAAoB;IACjD,IAAI,CAACN,QAAQ,GAAGO,OAAO,IAAI,CAAC,CAAC;IAC7B,IAAI,CAACE,iBAAiB,CAAC,CAAC;EAC5B;EACA;AACJ;AACA;EACI,IAAIN,EAAEA,CAAA,EAAG;IACL,OAAO,IAAI,CAACR,GAAG;EACnB;EACA;AACJ;AACA;EACI,IAAIS,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACR,eAAe;EAC/B;EACA;AACJ;AACA;EACI,IAAIc,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACZ,OAAO;EACvB;EACA;AACJ;AACA;EACI,IAAIQ,oBAAoBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACP,qBAAqB;EACrC;EACA;AACJ;AACA;EACI,IAAIY,UAAUA,CAAA,EAAG;IACb,OAAO,IAAI,CAACd,YAAY,CAACc,UAAU;EACvC;EACA;AACJ;AACA;EACI,IAAIC,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACf,YAAY,CAACe,KAAK;EAClC;EACA;AACJ;AACA;EACI,IAAIC,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAAChB,YAAY,CAACgB,QAAQ;EACrC;EACA;AACJ;AACA;EACI,IAAIC,UAAUA,CAAA,EAAG;IACb,OAAO,IAAI,CAACjB,YAAY,CAACiB,UAAU;EACvC;EACA;AACJ;AACA;EACI,IAAIA,UAAUA,CAACA,UAAU,EAAE;IACvB,IAAI,CAACjB,YAAY,CAACiB,UAAU,GAAGA,UAAU;EAC7C;EACA;AACJ;AACA;EACI,IAAIP,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACP,QAAQ;EACxB;EACA;AACJ;AACA;EACI,IAAIO,OAAOA,CAACA,OAAO,EAAE;IACjB,IAAI,CAACP,QAAQ,GAAGO,OAAO;EAC3B;EACA,IAAIQ,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACd,SAAS;EACzB;EACA;AACJ;AACA;EACIe,KAAKA,CAAA,EAAG;IACJ,IAAI,IAAI,CAAClB,OAAO,EAAE;MACd;IACJ;IACAN,MAAM,CAACgB,KAAK,CAAC,SAAS,CAAC;IACvB,IAAI,CAACV,OAAO,GAAG,IAAI;IACnB,IAAI,CAACD,YAAY,CAACmB,KAAK,CAAC,CAAC;IACzB,IAAI,CAACC,IAAI,CAAC,QAAQ,CAAC;IACnB;IACA,IAAI,CAAChB,SAAS,CAACiB,QAAQ,CAAC,OAAO,CAAC;EACpC;EACA;AACJ;AACA;EACIC,eAAeA,CAAA,EAAG;IACd,IAAI,IAAI,CAACrB,OAAO,EAAE;MACd;IACJ;IACAN,MAAM,CAACgB,KAAK,CAAC,mBAAmB,CAAC;IACjC,IAAI,CAACV,OAAO,GAAG,IAAI;IACnB,IAAI,CAACD,YAAY,CAACmB,KAAK,CAAC,CAAC;IACzB,IAAI,CAACE,QAAQ,CAAC,gBAAgB,CAAC;IAC/B;IACA,IAAI,CAACjB,SAAS,CAACiB,QAAQ,CAAC,OAAO,CAAC;EACpC;EACAT,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACZ,YAAY,CAACuB,gBAAgB,CAAC,MAAM,EAAE,MAAM;MAC7C,IAAI,IAAI,CAACtB,OAAO,EAAE;QACd;MACJ;MACAN,MAAM,CAACgB,KAAK,CAAC,0BAA0B,CAAC;MACxC,IAAI,CAACU,QAAQ,CAAC,MAAM,CAAC;IACzB,CAAC,CAAC;IACF,IAAI,CAACrB,YAAY,CAACuB,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK;MACnD,IAAI,IAAI,CAACvB,OAAO,EAAE;QACd;MACJ;MACA,IAAI;QAAEwB;MAAM,CAAC,GAAGD,KAAK;MACrB,IAAI,CAACC,KAAK,EAAE;QACRA,KAAK,GAAG,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAClD;MACA,IAAID,KAAK,CAACE,WAAW,KAAK,cAAc,EAAE;QACtChC,MAAM,CAAC8B,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAACG,aAAa,EAAEH,KAAK,CAACI,OAAO,CAAC;MACrG,CAAC,MACI;QACDlC,MAAM,CAAC8B,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACxD;MACA,IAAI,CAACJ,QAAQ,CAAC,OAAO,EAAEI,KAAK,CAAC;IACjC,CAAC,CAAC;IACF,IAAI,CAACzB,YAAY,CAACuB,gBAAgB,CAAC,OAAO,EAAE,MAAM;MAC9C,IAAI,IAAI,CAACtB,OAAO,EAAE;QACd;MACJ;MACAN,MAAM,CAACmC,IAAI,CAAC,2BAA2B,CAAC;MACxC,IAAI,CAAC7B,OAAO,GAAG,IAAI;MACnB,IAAI,CAACmB,IAAI,CAAC,QAAQ,CAAC;MACnB,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC;MACtB;MACA,IAAI,CAACjB,SAAS,CAACiB,QAAQ,CAAC,OAAO,CAAC;IACpC,CAAC,CAAC;IACF,IAAI,CAACrB,YAAY,CAACuB,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;MACrD,IAAI,IAAI,CAACvB,OAAO,EAAE;QACd;MACJ;MACA,IAAI,CAACoB,QAAQ,CAAC,SAAS,EAAEG,KAAK,CAACO,IAAI,CAAC;IACxC,CAAC,CAAC;EACN;AACJ;AACA1C,OAAO,CAACE,YAAY,GAAGA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}