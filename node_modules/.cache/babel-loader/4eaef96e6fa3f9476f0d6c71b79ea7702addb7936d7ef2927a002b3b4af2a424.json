{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Chrome74 = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst Logger_1 = require(\"../Logger\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst sdpCommonUtils = require(\"./sdp/commonUtils\");\nconst sdpUnifiedPlanUtils = require(\"./sdp/unifiedPlanUtils\");\nconst ortcUtils = require(\"./ortc/utils\");\nconst errors_1 = require(\"../errors\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\nconst logger = new Logger_1.Logger('Chrome74');\nconst NAME = 'Chrome74';\nconst SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\nclass Chrome74 extends HandlerInterface_1.HandlerInterface {\n  // Closed flag.\n  _closed = false;\n  // Handler direction.\n  _direction;\n  // Remote SDP handler.\n  _remoteSdp;\n  // Generic sending RTP parameters for audio and video.\n  _sendingRtpParametersByKind;\n  // Generic sending RTP parameters for audio and video suitable for the SDP\n  // remote answer.\n  _sendingRemoteRtpParametersByKind;\n  // Initial server side DTLS role. If not 'auto', it will force the opposite\n  // value in client side.\n  _forcedLocalDtlsRole;\n  // RTCPeerConnection instance.\n  _pc;\n  // Map of RTCTransceivers indexed by MID.\n  _mapMidTransceiver = new Map();\n  // Local stream for sending.\n  _sendStream = new MediaStream();\n  // Whether a DataChannel m=application section has been created.\n  _hasDataChannelMediaSection = false;\n  // Sending DataChannel id value counter. Incremented for each new DataChannel.\n  _nextSendSctpStreamId = 0;\n  // Got transport local and remote parameters.\n  _transportReady = false;\n  /**\r\n   * Creates a factory function.\r\n   */\n  static createFactory() {\n    return () => new Chrome74();\n  }\n  constructor() {\n    super();\n  }\n  get name() {\n    return NAME;\n  }\n  close() {\n    logger.debug('close()');\n    if (this._closed) {\n      return;\n    }\n    this._closed = true;\n    // Close RTCPeerConnection.\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    const pc = new RTCPeerConnection({\n      iceServers: [],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan'\n    });\n    try {\n      pc.addTransceiver('audio');\n      pc.addTransceiver('video');\n      const offer = await pc.createOffer();\n      try {\n        pc.close();\n      } catch (error) {}\n      const sdpObject = sdpTransform.parse(offer.sdp);\n      const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n        sdpObject\n      });\n      // libwebrtc supports NACK for OPUS but doesn't announce it.\n      ortcUtils.addNackSupportForOpus(nativeRtpCapabilities);\n      return nativeRtpCapabilities;\n    } catch (error) {\n      try {\n        pc.close();\n      } catch (error2) {}\n      throw error;\n    }\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: SCTP_NUM_STREAMS\n    };\n  }\n  run({\n    direction,\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    iceServers,\n    iceTransportPolicy,\n    additionalSettings,\n    proprietaryConstraints,\n    extendedRtpCapabilities\n  }) {\n    logger.debug('run()');\n    this._direction = direction;\n    this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters\n    });\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n    };\n    if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n      this._forcedLocalDtlsRole = dtlsParameters.role === 'server' ? 'client' : 'server';\n    }\n    this._pc = new RTCPeerConnection({\n      iceServers: iceServers ?? [],\n      iceTransportPolicy: iceTransportPolicy ?? 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'unified-plan',\n      ...additionalSettings\n    }, proprietaryConstraints);\n    this._pc.addEventListener('icegatheringstatechange', () => {\n      this.emit('@icegatheringstatechange', this._pc.iceGatheringState);\n    });\n    this._pc.addEventListener('icecandidateerror', event => {\n      this.emit('@icecandidateerror', event);\n    });\n    if (this._pc.connectionState) {\n      this._pc.addEventListener('connectionstatechange', () => {\n        this.emit('@connectionstatechange', this._pc.connectionState);\n      });\n    } else {\n      logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n      this._pc.addEventListener('iceconnectionstatechange', () => {\n        switch (this._pc.iceConnectionState) {\n          case 'checking':\n            {\n              this.emit('@connectionstatechange', 'connecting');\n              break;\n            }\n          case 'connected':\n          case 'completed':\n            {\n              this.emit('@connectionstatechange', 'connected');\n              break;\n            }\n          case 'failed':\n            {\n              this.emit('@connectionstatechange', 'failed');\n              break;\n            }\n          case 'disconnected':\n            {\n              this.emit('@connectionstatechange', 'disconnected');\n              break;\n            }\n          case 'closed':\n            {\n              this.emit('@connectionstatechange', 'closed');\n              break;\n            }\n        }\n      });\n    }\n  }\n  async updateIceServers(iceServers) {\n    this.assertNotClosed();\n    logger.debug('updateIceServers()');\n    const configuration = this._pc.getConfiguration();\n    configuration.iceServers = iceServers;\n    this._pc.setConfiguration(configuration);\n  }\n  async restartIce(iceParameters) {\n    this.assertNotClosed();\n    logger.debug('restartIce()');\n    // Provide the remote SDP handler with new remote ICE parameters.\n    this._remoteSdp.updateIceParameters(iceParameters);\n    if (!this._transportReady) {\n      return;\n    }\n    if (this._direction === 'send') {\n      const offer = await this._pc.createOffer({\n        iceRestart: true\n      });\n      logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n    } else {\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n    }\n  }\n  async getTransportStats() {\n    this.assertNotClosed();\n    return this._pc.getStats();\n  }\n  async send({\n    track,\n    encodings,\n    codecOptions,\n    codec\n  }) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (encodings && encodings.length > 1) {\n      encodings.forEach((encoding, idx) => {\n        encoding.rid = `r${idx}`;\n      });\n    }\n    const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\n    // This may throw.\n    sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n    const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);\n    // This may throw.\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n    const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n    const transceiver = this._pc.addTransceiver(track, {\n      direction: 'sendonly',\n      streams: [this._sendStream],\n      sendEncodings: encodings\n    });\n    let offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    // @ts-expect-error --- sdpTransform.SessionDescription type doesn't\n    // define extmapAllowMixed field.\n    if (localSdpObject.extmapAllowMixed) {\n      this._remoteSdp.setSessionExtmapAllowMixed();\n    }\n    let offerMediaObject;\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n        localSdpObject\n      });\n    }\n    // Special case for VP9 with SVC.\n    let hackVp9Svc = false;\n    const layers = (0, scalabilityModes_1.parse)((encodings ?? [{}])[0].scalabilityMode);\n    if (encodings && encodings.length === 1 && layers.spatialLayers > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\n      logger.debug('send() | enabling legacy simulcast for VP9 SVC');\n      hackVp9Svc = true;\n      localSdpObject = sdpTransform.parse(offer.sdp);\n      offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n      sdpUnifiedPlanUtils.addLegacySimulcast({\n        offerMediaObject,\n        numStreams: layers.spatialLayers\n      });\n      offer = {\n        type: 'offer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    }\n    logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    // We can now get the transceiver.mid.\n    const localId = transceiver.mid;\n    // Set MID.\n    sendingRtpParameters.mid = localId;\n    localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n    // Set RTCP CNAME.\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject\n    });\n    // Set RTP encodings by parsing the SDP offer if no encodings are given.\n    if (!encodings) {\n      sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject\n      });\n    }\n    // Set RTP encodings by parsing the SDP offer and complete them with given\n    // one if just a single encoding has been given.\n    else if (encodings.length === 1) {\n      let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject\n      });\n      Object.assign(newEncodings[0], encodings[0]);\n      // Hack for VP9 SVC.\n      if (hackVp9Svc) {\n        newEncodings = [newEncodings[0]];\n      }\n      sendingRtpParameters.encodings = newEncodings;\n    }\n    // Otherwise if more than 1 encoding are given use them verbatim.\n    else {\n      sendingRtpParameters.encodings = encodings;\n    }\n    // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n    // each encoding.\n    if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\n      for (const encoding of sendingRtpParameters.encodings) {\n        if (encoding.scalabilityMode) {\n          encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n        } else {\n          encoding.scalabilityMode = 'L1T3';\n        }\n      }\n    }\n    this._remoteSdp.send({\n      offerMediaObject,\n      reuseMid: mediaSectionIdx.reuseMid,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions\n    });\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    // Store in the map.\n    this._mapMidTransceiver.set(localId, transceiver);\n    return {\n      localId,\n      rtpParameters: sendingRtpParameters,\n      rtpSender: transceiver.sender\n    };\n  }\n  async stopSending(localId) {\n    this.assertSendDirection();\n    logger.debug('stopSending() [localId:%s]', localId);\n    if (this._closed) {\n      return;\n    }\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    void transceiver.sender.replaceTrack(null);\n    this._pc.removeTrack(transceiver.sender);\n    const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n    if (mediaSectionClosed) {\n      try {\n        transceiver.stop();\n      } catch (error) {}\n    }\n    const offer = await this._pc.createOffer();\n    logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    this._mapMidTransceiver.delete(localId);\n  }\n  async pauseSending(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('pauseSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    transceiver.direction = 'inactive';\n    this._remoteSdp.pauseMediaSection(localId);\n    const offer = await this._pc.createOffer();\n    logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async resumeSending(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('resumeSending() [localId:%s]', localId);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    this._remoteSdp.resumeSendingMediaSection(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    transceiver.direction = 'sendonly';\n    const offer = await this._pc.createOffer();\n    logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async replaceTrack(localId, track) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    await transceiver.sender.replaceTrack(track);\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) {\n        encoding.active = true;\n      } else {\n        encoding.active = false;\n      }\n    });\n    await transceiver.sender.setParameters(parameters);\n    this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n    const offer = await this._pc.createOffer();\n    logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    const parameters = transceiver.sender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await transceiver.sender.setParameters(parameters);\n    this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n    const offer = await this._pc.createOffer();\n    logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  async getSenderStats(localId) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    return transceiver.sender.getStats();\n  }\n  async sendDataChannel({\n    ordered,\n    maxPacketLifeTime,\n    maxRetransmits,\n    label,\n    protocol\n  }) {\n    this.assertNotClosed();\n    this.assertSendDirection();\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('sendDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // Increase next id.\n    this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n    // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(m => m.type === 'application');\n      if (!this._transportReady) {\n        await this.setupTransport({\n          localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      this._remoteSdp.sendSctpAssociation({\n        offerMediaObject\n      });\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    const sctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits\n    };\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n  async receive(optionsList) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const results = [];\n    const mapLocalId = new Map();\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters,\n        streamId\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n      const localId = rtpParameters.mid ?? String(this._mapMidTransceiver.size);\n      mapLocalId.set(trackId, localId);\n      this._remoteSdp.receive({\n        mid: localId,\n        kind,\n        offerRtpParameters: rtpParameters,\n        streamId: streamId ?? rtpParameters.rtcp.cname,\n        trackId\n      });\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    for (const options of optionsList) {\n      const {\n        trackId,\n        rtpParameters\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const answerMediaObject = localSdpObject.media.find(m => String(m.mid) === localId);\n      // May need to modify codec parameters in the answer based on codec\n      // parameters in the offer.\n      sdpCommonUtils.applyCodecParameters({\n        offerRtpParameters: rtpParameters,\n        answerMediaObject\n      });\n    }\n    answer = {\n      type: 'answer',\n      sdp: sdpTransform.write(localSdpObject)\n    };\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n        localSdpObject\n      });\n    }\n    logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const options of optionsList) {\n      const {\n        trackId\n      } = options;\n      const localId = mapLocalId.get(trackId);\n      const transceiver = this._pc.getTransceivers().find(t => t.mid === localId);\n      if (!transceiver) {\n        throw new Error('new RTCRtpTransceiver not found');\n      } else {\n        // Store in the map.\n        this._mapMidTransceiver.set(localId, transceiver);\n        results.push({\n          localId,\n          track: transceiver.receiver.track,\n          rtpReceiver: transceiver.receiver\n        });\n      }\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    this.assertRecvDirection();\n    if (this._closed) {\n      return;\n    }\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      this._remoteSdp.closeMediaSection(transceiver.mid);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const localId of localIds) {\n      this._mapMidTransceiver.delete(localId);\n    }\n  }\n  async pauseReceiving(localIds) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('pauseReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      transceiver.direction = 'inactive';\n      this._remoteSdp.pauseMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async resumeReceiving(localIds) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('resumeReceiving() [localId:%s]', localId);\n      const transceiver = this._mapMidTransceiver.get(localId);\n      if (!transceiver) {\n        throw new Error('associated RTCRtpTransceiver not found');\n      }\n      transceiver.direction = 'recvonly';\n      this._remoteSdp.resumeReceivingMediaSection(localId);\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async getReceiverStats(localId) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const transceiver = this._mapMidTransceiver.get(localId);\n    if (!transceiver) {\n      throw new Error('associated RTCRtpTransceiver not found');\n    }\n    return transceiver.receiver.getStats();\n  }\n  async receiveDataChannel({\n    sctpStreamParameters,\n    label,\n    protocol\n  }) {\n    this.assertNotClosed();\n    this.assertRecvDirection();\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits\n    } = sctpStreamParameters;\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('receiveDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp.receiveSctpAssociation();\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        await this.setupTransport({\n          localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    return {\n      dataChannel\n    };\n  }\n  async setupTransport({\n    localDtlsRole,\n    localSdpObject\n  }) {\n    if (!localSdpObject) {\n      localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    }\n    // Get our local DTLS parameters.\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject\n    });\n    // Set our DTLS role.\n    dtlsParameters.role = localDtlsRole;\n    // Update the remote DTLS role in the SDP.\n    this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    this._transportReady = true;\n  }\n  assertNotClosed() {\n    if (this._closed) {\n      throw new errors_1.InvalidStateError('method called in a closed handler');\n    }\n  }\n  assertSendDirection() {\n    if (this._direction !== 'send') {\n      throw new Error('method can just be called for handlers with \"send\" direction');\n    }\n  }\n  assertRecvDirection() {\n    if (this._direction !== 'recv') {\n      throw new Error('method can just be called for handlers with \"recv\" direction');\n    }\n  }\n}\nexports.Chrome74 = Chrome74;","map":{"version":3,"names":["Object","defineProperty","exports","value","Chrome74","sdpTransform","require","Logger_1","utils","ortc","sdpCommonUtils","sdpUnifiedPlanUtils","ortcUtils","errors_1","HandlerInterface_1","RemoteSdp_1","scalabilityModes_1","logger","Logger","NAME","SCTP_NUM_STREAMS","OS","MIS","HandlerInterface","_closed","_direction","_remoteSdp","_sendingRtpParametersByKind","_sendingRemoteRtpParametersByKind","_forcedLocalDtlsRole","_pc","_mapMidTransceiver","Map","_sendStream","MediaStream","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","createFactory","constructor","name","close","debug","error","emit","getNativeRtpCapabilities","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","addTransceiver","offer","createOffer","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","addNackSupportForOpus","error2","getNativeSctpCapabilities","numStreams","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","RemoteSdp","audio","getSendingRtpParameters","video","getSendingRemoteRtpParameters","role","addEventListener","iceGatheringState","event","connectionState","warn","iceConnectionState","updateIceServers","assertNotClosed","configuration","getConfiguration","setConfiguration","restartIce","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getTransportStats","getStats","send","track","encodings","codecOptions","codec","assertSendDirection","kind","id","length","forEach","encoding","idx","rid","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","mediaSectionIdx","getNextMediaSectionIdx","transceiver","streams","sendEncodings","localSdpObject","extmapAllowMixed","setSessionExtmapAllowMixed","offerMediaObject","setupTransport","localDtlsRole","hackVp9Svc","layers","scalabilityMode","spatialLayers","mimeType","toLowerCase","media","addLegacySimulcast","write","localId","mid","localDescription","rtcp","cname","getCname","getRtpEncodings","newEncodings","assign","temporalLayers","reuseMid","offerRtpParameters","answerRtpParameters","set","rtpParameters","rtpSender","sender","stopSending","get","Error","replaceTrack","removeTrack","mediaSectionClosed","closeMediaSection","stop","delete","pauseSending","pauseMediaSection","resumeSending","resumeSendingMediaSection","setMaxSpatialLayer","spatialLayer","parameters","getParameters","active","setParameters","muxMediaSectionSimulcast","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","dataChannel","createDataChannel","find","m","sendSctpAssociation","sctpStreamParameters","streamId","receive","optionsList","assertRecvDirection","results","mapLocalId","trackId","String","size","answerMediaObject","applyCodecParameters","getTransceivers","t","push","receiver","rtpReceiver","stopReceiving","localIds","pauseReceiving","resumeReceiving","resumeReceivingMediaSection","getReceiverStats","receiveDataChannel","receiveSctpAssociation","extractDtlsParameters","updateDtlsRole","Promise","resolve","reject","safeEmit","InvalidStateError"],"sources":["D:/LECHUAN/NT114/DACN_2/DACN-FE/node_modules/mediasoup-client/lib/handlers/Chrome74.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Chrome74 = void 0;\r\nconst sdpTransform = require(\"sdp-transform\");\r\nconst Logger_1 = require(\"../Logger\");\r\nconst utils = require(\"../utils\");\r\nconst ortc = require(\"../ortc\");\r\nconst sdpCommonUtils = require(\"./sdp/commonUtils\");\r\nconst sdpUnifiedPlanUtils = require(\"./sdp/unifiedPlanUtils\");\r\nconst ortcUtils = require(\"./ortc/utils\");\r\nconst errors_1 = require(\"../errors\");\r\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\r\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\r\nconst scalabilityModes_1 = require(\"../scalabilityModes\");\r\nconst logger = new Logger_1.Logger('Chrome74');\r\nconst NAME = 'Chrome74';\r\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\r\nclass Chrome74 extends HandlerInterface_1.HandlerInterface {\r\n    // Closed flag.\r\n    _closed = false;\r\n    // Handler direction.\r\n    _direction;\r\n    // Remote SDP handler.\r\n    _remoteSdp;\r\n    // Generic sending RTP parameters for audio and video.\r\n    _sendingRtpParametersByKind;\r\n    // Generic sending RTP parameters for audio and video suitable for the SDP\r\n    // remote answer.\r\n    _sendingRemoteRtpParametersByKind;\r\n    // Initial server side DTLS role. If not 'auto', it will force the opposite\r\n    // value in client side.\r\n    _forcedLocalDtlsRole;\r\n    // RTCPeerConnection instance.\r\n    _pc;\r\n    // Map of RTCTransceivers indexed by MID.\r\n    _mapMidTransceiver = new Map();\r\n    // Local stream for sending.\r\n    _sendStream = new MediaStream();\r\n    // Whether a DataChannel m=application section has been created.\r\n    _hasDataChannelMediaSection = false;\r\n    // Sending DataChannel id value counter. Incremented for each new DataChannel.\r\n    _nextSendSctpStreamId = 0;\r\n    // Got transport local and remote parameters.\r\n    _transportReady = false;\r\n    /**\r\n     * Creates a factory function.\r\n     */\r\n    static createFactory() {\r\n        return () => new Chrome74();\r\n    }\r\n    constructor() {\r\n        super();\r\n    }\r\n    get name() {\r\n        return NAME;\r\n    }\r\n    close() {\r\n        logger.debug('close()');\r\n        if (this._closed) {\r\n            return;\r\n        }\r\n        this._closed = true;\r\n        // Close RTCPeerConnection.\r\n        if (this._pc) {\r\n            try {\r\n                this._pc.close();\r\n            }\r\n            catch (error) { }\r\n        }\r\n        this.emit('@close');\r\n    }\r\n    async getNativeRtpCapabilities() {\r\n        logger.debug('getNativeRtpCapabilities()');\r\n        const pc = new RTCPeerConnection({\r\n            iceServers: [],\r\n            iceTransportPolicy: 'all',\r\n            bundlePolicy: 'max-bundle',\r\n            rtcpMuxPolicy: 'require',\r\n            sdpSemantics: 'unified-plan',\r\n        });\r\n        try {\r\n            pc.addTransceiver('audio');\r\n            pc.addTransceiver('video');\r\n            const offer = await pc.createOffer();\r\n            try {\r\n                pc.close();\r\n            }\r\n            catch (error) { }\r\n            const sdpObject = sdpTransform.parse(offer.sdp);\r\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\r\n                sdpObject,\r\n            });\r\n            // libwebrtc supports NACK for OPUS but doesn't announce it.\r\n            ortcUtils.addNackSupportForOpus(nativeRtpCapabilities);\r\n            return nativeRtpCapabilities;\r\n        }\r\n        catch (error) {\r\n            try {\r\n                pc.close();\r\n            }\r\n            catch (error2) { }\r\n            throw error;\r\n        }\r\n    }\r\n    async getNativeSctpCapabilities() {\r\n        logger.debug('getNativeSctpCapabilities()');\r\n        return {\r\n            numStreams: SCTP_NUM_STREAMS,\r\n        };\r\n    }\r\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities, }) {\r\n        logger.debug('run()');\r\n        this._direction = direction;\r\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\r\n            iceParameters,\r\n            iceCandidates,\r\n            dtlsParameters,\r\n            sctpParameters,\r\n        });\r\n        this._sendingRtpParametersByKind = {\r\n            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\r\n            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),\r\n        };\r\n        this._sendingRemoteRtpParametersByKind = {\r\n            audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\r\n            video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities),\r\n        };\r\n        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\r\n            this._forcedLocalDtlsRole =\r\n                dtlsParameters.role === 'server' ? 'client' : 'server';\r\n        }\r\n        this._pc = new RTCPeerConnection({\r\n            iceServers: iceServers ?? [],\r\n            iceTransportPolicy: iceTransportPolicy ?? 'all',\r\n            bundlePolicy: 'max-bundle',\r\n            rtcpMuxPolicy: 'require',\r\n            sdpSemantics: 'unified-plan',\r\n            ...additionalSettings,\r\n        }, proprietaryConstraints);\r\n        this._pc.addEventListener('icegatheringstatechange', () => {\r\n            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);\r\n        });\r\n        this._pc.addEventListener('icecandidateerror', (event) => {\r\n            this.emit('@icecandidateerror', event);\r\n        });\r\n        if (this._pc.connectionState) {\r\n            this._pc.addEventListener('connectionstatechange', () => {\r\n                this.emit('@connectionstatechange', this._pc.connectionState);\r\n            });\r\n        }\r\n        else {\r\n            logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\r\n            this._pc.addEventListener('iceconnectionstatechange', () => {\r\n                switch (this._pc.iceConnectionState) {\r\n                    case 'checking': {\r\n                        this.emit('@connectionstatechange', 'connecting');\r\n                        break;\r\n                    }\r\n                    case 'connected':\r\n                    case 'completed': {\r\n                        this.emit('@connectionstatechange', 'connected');\r\n                        break;\r\n                    }\r\n                    case 'failed': {\r\n                        this.emit('@connectionstatechange', 'failed');\r\n                        break;\r\n                    }\r\n                    case 'disconnected': {\r\n                        this.emit('@connectionstatechange', 'disconnected');\r\n                        break;\r\n                    }\r\n                    case 'closed': {\r\n                        this.emit('@connectionstatechange', 'closed');\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    async updateIceServers(iceServers) {\r\n        this.assertNotClosed();\r\n        logger.debug('updateIceServers()');\r\n        const configuration = this._pc.getConfiguration();\r\n        configuration.iceServers = iceServers;\r\n        this._pc.setConfiguration(configuration);\r\n    }\r\n    async restartIce(iceParameters) {\r\n        this.assertNotClosed();\r\n        logger.debug('restartIce()');\r\n        // Provide the remote SDP handler with new remote ICE parameters.\r\n        this._remoteSdp.updateIceParameters(iceParameters);\r\n        if (!this._transportReady) {\r\n            return;\r\n        }\r\n        if (this._direction === 'send') {\r\n            const offer = await this._pc.createOffer({ iceRestart: true });\r\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n            await this._pc.setLocalDescription(offer);\r\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n            await this._pc.setRemoteDescription(answer);\r\n        }\r\n        else {\r\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n            await this._pc.setRemoteDescription(offer);\r\n            const answer = await this._pc.createAnswer();\r\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\r\n            await this._pc.setLocalDescription(answer);\r\n        }\r\n    }\r\n    async getTransportStats() {\r\n        this.assertNotClosed();\r\n        return this._pc.getStats();\r\n    }\r\n    async send({ track, encodings, codecOptions, codec, }) {\r\n        this.assertNotClosed();\r\n        this.assertSendDirection();\r\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\r\n        if (encodings && encodings.length > 1) {\r\n            encodings.forEach((encoding, idx) => {\r\n                encoding.rid = `r${idx}`;\r\n            });\r\n        }\r\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\r\n        // This may throw.\r\n        sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\r\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);\r\n        // This may throw.\r\n        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\r\n        const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\r\n        const transceiver = this._pc.addTransceiver(track, {\r\n            direction: 'sendonly',\r\n            streams: [this._sendStream],\r\n            sendEncodings: encodings,\r\n        });\r\n        let offer = await this._pc.createOffer();\r\n        let localSdpObject = sdpTransform.parse(offer.sdp);\r\n        // @ts-expect-error --- sdpTransform.SessionDescription type doesn't\r\n        // define extmapAllowMixed field.\r\n        if (localSdpObject.extmapAllowMixed) {\r\n            this._remoteSdp.setSessionExtmapAllowMixed();\r\n        }\r\n        let offerMediaObject;\r\n        if (!this._transportReady) {\r\n            await this.setupTransport({\r\n                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\r\n                localSdpObject,\r\n            });\r\n        }\r\n        // Special case for VP9 with SVC.\r\n        let hackVp9Svc = false;\r\n        const layers = (0, scalabilityModes_1.parse)((encodings ?? [{}])[0].scalabilityMode);\r\n        if (encodings &&\r\n            encodings.length === 1 &&\r\n            layers.spatialLayers > 1 &&\r\n            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9') {\r\n            logger.debug('send() | enabling legacy simulcast for VP9 SVC');\r\n            hackVp9Svc = true;\r\n            localSdpObject = sdpTransform.parse(offer.sdp);\r\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\r\n            sdpUnifiedPlanUtils.addLegacySimulcast({\r\n                offerMediaObject,\r\n                numStreams: layers.spatialLayers,\r\n            });\r\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\r\n        }\r\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n        await this._pc.setLocalDescription(offer);\r\n        // We can now get the transceiver.mid.\r\n        const localId = transceiver.mid;\r\n        // Set MID.\r\n        sendingRtpParameters.mid = localId;\r\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\r\n        offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\r\n        // Set RTCP CNAME.\r\n        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\r\n            offerMediaObject,\r\n        });\r\n        // Set RTP encodings by parsing the SDP offer if no encodings are given.\r\n        if (!encodings) {\r\n            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\r\n                offerMediaObject,\r\n            });\r\n        }\r\n        // Set RTP encodings by parsing the SDP offer and complete them with given\r\n        // one if just a single encoding has been given.\r\n        else if (encodings.length === 1) {\r\n            let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\r\n                offerMediaObject,\r\n            });\r\n            Object.assign(newEncodings[0], encodings[0]);\r\n            // Hack for VP9 SVC.\r\n            if (hackVp9Svc) {\r\n                newEncodings = [newEncodings[0]];\r\n            }\r\n            sendingRtpParameters.encodings = newEncodings;\r\n        }\r\n        // Otherwise if more than 1 encoding are given use them verbatim.\r\n        else {\r\n            sendingRtpParameters.encodings = encodings;\r\n        }\r\n        // If VP8 or H264 and there is effective simulcast, add scalabilityMode to\r\n        // each encoding.\r\n        if (sendingRtpParameters.encodings.length > 1 &&\r\n            (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\r\n                sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264')) {\r\n            for (const encoding of sendingRtpParameters.encodings) {\r\n                if (encoding.scalabilityMode) {\r\n                    encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\r\n                }\r\n                else {\r\n                    encoding.scalabilityMode = 'L1T3';\r\n                }\r\n            }\r\n        }\r\n        this._remoteSdp.send({\r\n            offerMediaObject,\r\n            reuseMid: mediaSectionIdx.reuseMid,\r\n            offerRtpParameters: sendingRtpParameters,\r\n            answerRtpParameters: sendingRemoteRtpParameters,\r\n            codecOptions,\r\n        });\r\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n        await this._pc.setRemoteDescription(answer);\r\n        // Store in the map.\r\n        this._mapMidTransceiver.set(localId, transceiver);\r\n        return {\r\n            localId,\r\n            rtpParameters: sendingRtpParameters,\r\n            rtpSender: transceiver.sender,\r\n        };\r\n    }\r\n    async stopSending(localId) {\r\n        this.assertSendDirection();\r\n        logger.debug('stopSending() [localId:%s]', localId);\r\n        if (this._closed) {\r\n            return;\r\n        }\r\n        const transceiver = this._mapMidTransceiver.get(localId);\r\n        if (!transceiver) {\r\n            throw new Error('associated RTCRtpTransceiver not found');\r\n        }\r\n        void transceiver.sender.replaceTrack(null);\r\n        this._pc.removeTrack(transceiver.sender);\r\n        const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\r\n        if (mediaSectionClosed) {\r\n            try {\r\n                transceiver.stop();\r\n            }\r\n            catch (error) { }\r\n        }\r\n        const offer = await this._pc.createOffer();\r\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n        await this._pc.setLocalDescription(offer);\r\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n        await this._pc.setRemoteDescription(answer);\r\n        this._mapMidTransceiver.delete(localId);\r\n    }\r\n    async pauseSending(localId) {\r\n        this.assertNotClosed();\r\n        this.assertSendDirection();\r\n        logger.debug('pauseSending() [localId:%s]', localId);\r\n        const transceiver = this._mapMidTransceiver.get(localId);\r\n        if (!transceiver) {\r\n            throw new Error('associated RTCRtpTransceiver not found');\r\n        }\r\n        transceiver.direction = 'inactive';\r\n        this._remoteSdp.pauseMediaSection(localId);\r\n        const offer = await this._pc.createOffer();\r\n        logger.debug('pauseSending() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n        await this._pc.setLocalDescription(offer);\r\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('pauseSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n        await this._pc.setRemoteDescription(answer);\r\n    }\r\n    async resumeSending(localId) {\r\n        this.assertNotClosed();\r\n        this.assertSendDirection();\r\n        logger.debug('resumeSending() [localId:%s]', localId);\r\n        const transceiver = this._mapMidTransceiver.get(localId);\r\n        this._remoteSdp.resumeSendingMediaSection(localId);\r\n        if (!transceiver) {\r\n            throw new Error('associated RTCRtpTransceiver not found');\r\n        }\r\n        transceiver.direction = 'sendonly';\r\n        const offer = await this._pc.createOffer();\r\n        logger.debug('resumeSending() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n        await this._pc.setLocalDescription(offer);\r\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('resumeSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n        await this._pc.setRemoteDescription(answer);\r\n    }\r\n    async replaceTrack(localId, track) {\r\n        this.assertNotClosed();\r\n        this.assertSendDirection();\r\n        if (track) {\r\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\r\n        }\r\n        else {\r\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\r\n        }\r\n        const transceiver = this._mapMidTransceiver.get(localId);\r\n        if (!transceiver) {\r\n            throw new Error('associated RTCRtpTransceiver not found');\r\n        }\r\n        await transceiver.sender.replaceTrack(track);\r\n    }\r\n    async setMaxSpatialLayer(localId, spatialLayer) {\r\n        this.assertNotClosed();\r\n        this.assertSendDirection();\r\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\r\n        const transceiver = this._mapMidTransceiver.get(localId);\r\n        if (!transceiver) {\r\n            throw new Error('associated RTCRtpTransceiver not found');\r\n        }\r\n        const parameters = transceiver.sender.getParameters();\r\n        parameters.encodings.forEach((encoding, idx) => {\r\n            if (idx <= spatialLayer) {\r\n                encoding.active = true;\r\n            }\r\n            else {\r\n                encoding.active = false;\r\n            }\r\n        });\r\n        await transceiver.sender.setParameters(parameters);\r\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\r\n        const offer = await this._pc.createOffer();\r\n        logger.debug('setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n        await this._pc.setLocalDescription(offer);\r\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n        await this._pc.setRemoteDescription(answer);\r\n    }\r\n    async setRtpEncodingParameters(localId, params) {\r\n        this.assertNotClosed();\r\n        this.assertSendDirection();\r\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\r\n        const transceiver = this._mapMidTransceiver.get(localId);\r\n        if (!transceiver) {\r\n            throw new Error('associated RTCRtpTransceiver not found');\r\n        }\r\n        const parameters = transceiver.sender.getParameters();\r\n        parameters.encodings.forEach((encoding, idx) => {\r\n            parameters.encodings[idx] = { ...encoding, ...params };\r\n        });\r\n        await transceiver.sender.setParameters(parameters);\r\n        this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\r\n        const offer = await this._pc.createOffer();\r\n        logger.debug('setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n        await this._pc.setLocalDescription(offer);\r\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n        await this._pc.setRemoteDescription(answer);\r\n    }\r\n    async getSenderStats(localId) {\r\n        this.assertNotClosed();\r\n        this.assertSendDirection();\r\n        const transceiver = this._mapMidTransceiver.get(localId);\r\n        if (!transceiver) {\r\n            throw new Error('associated RTCRtpTransceiver not found');\r\n        }\r\n        return transceiver.sender.getStats();\r\n    }\r\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, }) {\r\n        this.assertNotClosed();\r\n        this.assertSendDirection();\r\n        const options = {\r\n            negotiated: true,\r\n            id: this._nextSendSctpStreamId,\r\n            ordered,\r\n            maxPacketLifeTime,\r\n            maxRetransmits,\r\n            protocol,\r\n        };\r\n        logger.debug('sendDataChannel() [options:%o]', options);\r\n        const dataChannel = this._pc.createDataChannel(label, options);\r\n        // Increase next id.\r\n        this._nextSendSctpStreamId =\r\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\r\n        // If this is the first DataChannel we need to create the SDP answer with\r\n        // m=application section.\r\n        if (!this._hasDataChannelMediaSection) {\r\n            const offer = await this._pc.createOffer();\r\n            const localSdpObject = sdpTransform.parse(offer.sdp);\r\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === 'application');\r\n            if (!this._transportReady) {\r\n                await this.setupTransport({\r\n                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\r\n                    localSdpObject,\r\n                });\r\n            }\r\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n            await this._pc.setLocalDescription(offer);\r\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\r\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n            await this._pc.setRemoteDescription(answer);\r\n            this._hasDataChannelMediaSection = true;\r\n        }\r\n        const sctpStreamParameters = {\r\n            streamId: options.id,\r\n            ordered: options.ordered,\r\n            maxPacketLifeTime: options.maxPacketLifeTime,\r\n            maxRetransmits: options.maxRetransmits,\r\n        };\r\n        return { dataChannel, sctpStreamParameters };\r\n    }\r\n    async receive(optionsList) {\r\n        this.assertNotClosed();\r\n        this.assertRecvDirection();\r\n        const results = [];\r\n        const mapLocalId = new Map();\r\n        for (const options of optionsList) {\r\n            const { trackId, kind, rtpParameters, streamId } = options;\r\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\r\n            const localId = rtpParameters.mid ?? String(this._mapMidTransceiver.size);\r\n            mapLocalId.set(trackId, localId);\r\n            this._remoteSdp.receive({\r\n                mid: localId,\r\n                kind,\r\n                offerRtpParameters: rtpParameters,\r\n                streamId: streamId ?? rtpParameters.rtcp.cname,\r\n                trackId,\r\n            });\r\n        }\r\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n        await this._pc.setRemoteDescription(offer);\r\n        let answer = await this._pc.createAnswer();\r\n        const localSdpObject = sdpTransform.parse(answer.sdp);\r\n        for (const options of optionsList) {\r\n            const { trackId, rtpParameters } = options;\r\n            const localId = mapLocalId.get(trackId);\r\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\r\n            // May need to modify codec parameters in the answer based on codec\r\n            // parameters in the offer.\r\n            sdpCommonUtils.applyCodecParameters({\r\n                offerRtpParameters: rtpParameters,\r\n                answerMediaObject,\r\n            });\r\n        }\r\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\r\n        if (!this._transportReady) {\r\n            await this.setupTransport({\r\n                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\r\n                localSdpObject,\r\n            });\r\n        }\r\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\r\n        await this._pc.setLocalDescription(answer);\r\n        for (const options of optionsList) {\r\n            const { trackId } = options;\r\n            const localId = mapLocalId.get(trackId);\r\n            const transceiver = this._pc\r\n                .getTransceivers()\r\n                .find((t) => t.mid === localId);\r\n            if (!transceiver) {\r\n                throw new Error('new RTCRtpTransceiver not found');\r\n            }\r\n            else {\r\n                // Store in the map.\r\n                this._mapMidTransceiver.set(localId, transceiver);\r\n                results.push({\r\n                    localId,\r\n                    track: transceiver.receiver.track,\r\n                    rtpReceiver: transceiver.receiver,\r\n                });\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    async stopReceiving(localIds) {\r\n        this.assertRecvDirection();\r\n        if (this._closed) {\r\n            return;\r\n        }\r\n        for (const localId of localIds) {\r\n            logger.debug('stopReceiving() [localId:%s]', localId);\r\n            const transceiver = this._mapMidTransceiver.get(localId);\r\n            if (!transceiver) {\r\n                throw new Error('associated RTCRtpTransceiver not found');\r\n            }\r\n            this._remoteSdp.closeMediaSection(transceiver.mid);\r\n        }\r\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n        await this._pc.setRemoteDescription(offer);\r\n        const answer = await this._pc.createAnswer();\r\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\r\n        await this._pc.setLocalDescription(answer);\r\n        for (const localId of localIds) {\r\n            this._mapMidTransceiver.delete(localId);\r\n        }\r\n    }\r\n    async pauseReceiving(localIds) {\r\n        this.assertNotClosed();\r\n        this.assertRecvDirection();\r\n        for (const localId of localIds) {\r\n            logger.debug('pauseReceiving() [localId:%s]', localId);\r\n            const transceiver = this._mapMidTransceiver.get(localId);\r\n            if (!transceiver) {\r\n                throw new Error('associated RTCRtpTransceiver not found');\r\n            }\r\n            transceiver.direction = 'inactive';\r\n            this._remoteSdp.pauseMediaSection(localId);\r\n        }\r\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n        await this._pc.setRemoteDescription(offer);\r\n        const answer = await this._pc.createAnswer();\r\n        logger.debug('pauseReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\r\n        await this._pc.setLocalDescription(answer);\r\n    }\r\n    async resumeReceiving(localIds) {\r\n        this.assertNotClosed();\r\n        this.assertRecvDirection();\r\n        for (const localId of localIds) {\r\n            logger.debug('resumeReceiving() [localId:%s]', localId);\r\n            const transceiver = this._mapMidTransceiver.get(localId);\r\n            if (!transceiver) {\r\n                throw new Error('associated RTCRtpTransceiver not found');\r\n            }\r\n            transceiver.direction = 'recvonly';\r\n            this._remoteSdp.resumeReceivingMediaSection(localId);\r\n        }\r\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n        await this._pc.setRemoteDescription(offer);\r\n        const answer = await this._pc.createAnswer();\r\n        logger.debug('resumeReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\r\n        await this._pc.setLocalDescription(answer);\r\n    }\r\n    async getReceiverStats(localId) {\r\n        this.assertNotClosed();\r\n        this.assertRecvDirection();\r\n        const transceiver = this._mapMidTransceiver.get(localId);\r\n        if (!transceiver) {\r\n            throw new Error('associated RTCRtpTransceiver not found');\r\n        }\r\n        return transceiver.receiver.getStats();\r\n    }\r\n    async receiveDataChannel({ sctpStreamParameters, label, protocol, }) {\r\n        this.assertNotClosed();\r\n        this.assertRecvDirection();\r\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits, } = sctpStreamParameters;\r\n        const options = {\r\n            negotiated: true,\r\n            id: streamId,\r\n            ordered,\r\n            maxPacketLifeTime,\r\n            maxRetransmits,\r\n            protocol,\r\n        };\r\n        logger.debug('receiveDataChannel() [options:%o]', options);\r\n        const dataChannel = this._pc.createDataChannel(label, options);\r\n        // If this is the first DataChannel we need to create the SDP offer with\r\n        // m=application section.\r\n        if (!this._hasDataChannelMediaSection) {\r\n            this._remoteSdp.receiveSctpAssociation();\r\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n            await this._pc.setRemoteDescription(offer);\r\n            const answer = await this._pc.createAnswer();\r\n            if (!this._transportReady) {\r\n                const localSdpObject = sdpTransform.parse(answer.sdp);\r\n                await this.setupTransport({\r\n                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\r\n                    localSdpObject,\r\n                });\r\n            }\r\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n            await this._pc.setLocalDescription(answer);\r\n            this._hasDataChannelMediaSection = true;\r\n        }\r\n        return { dataChannel };\r\n    }\r\n    async setupTransport({ localDtlsRole, localSdpObject, }) {\r\n        if (!localSdpObject) {\r\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\r\n        }\r\n        // Get our local DTLS parameters.\r\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\r\n            sdpObject: localSdpObject,\r\n        });\r\n        // Set our DTLS role.\r\n        dtlsParameters.role = localDtlsRole;\r\n        // Update the remote DTLS role in the SDP.\r\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\r\n        // Need to tell the remote transport about our parameters.\r\n        await new Promise((resolve, reject) => {\r\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\r\n        });\r\n        this._transportReady = true;\r\n    }\r\n    assertNotClosed() {\r\n        if (this._closed) {\r\n            throw new errors_1.InvalidStateError('method called in a closed handler');\r\n        }\r\n    }\r\n    assertSendDirection() {\r\n        if (this._direction !== 'send') {\r\n            throw new Error('method can just be called for handlers with \"send\" direction');\r\n        }\r\n    }\r\n    assertRecvDirection() {\r\n        if (this._direction !== 'recv') {\r\n            throw new Error('method can just be called for handlers with \"recv\" direction');\r\n        }\r\n    }\r\n}\r\nexports.Chrome74 = Chrome74;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}