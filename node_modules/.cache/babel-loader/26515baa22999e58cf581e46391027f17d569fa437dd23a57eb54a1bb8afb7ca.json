{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Safari11 = void 0;\nconst sdpTransform = require(\"sdp-transform\");\nconst Logger_1 = require(\"../Logger\");\nconst utils = require(\"../utils\");\nconst ortc = require(\"../ortc\");\nconst sdpCommonUtils = require(\"./sdp/commonUtils\");\nconst sdpPlanBUtils = require(\"./sdp/planBUtils\");\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\nconst logger = new Logger_1.Logger('Safari11');\nconst NAME = 'Safari11';\nconst SCTP_NUM_STREAMS = {\n  OS: 1024,\n  MIS: 1024\n};\nclass Safari11 extends HandlerInterface_1.HandlerInterface {\n  // Handler direction.\n  _direction;\n  // Remote SDP handler.\n  _remoteSdp;\n  // Generic sending RTP parameters for audio and video.\n  _sendingRtpParametersByKind;\n  // Generic sending RTP parameters for audio and video suitable for the SDP\n  // remote answer.\n  _sendingRemoteRtpParametersByKind;\n  // Initial server side DTLS role. If not 'auto', it will force the opposite\n  // value in client side.\n  _forcedLocalDtlsRole;\n  // RTCPeerConnection instance.\n  _pc;\n  // Local stream for sending.\n  _sendStream = new MediaStream();\n  // Map of RTCRtpSender indexed by localId.\n  _mapSendLocalIdRtpSender = new Map();\n  // Next sending localId.\n  _nextSendLocalId = 0;\n  // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\n  // Value is an Object with mid, rtpParameters and rtpReceiver.\n  _mapRecvLocalIdInfo = new Map();\n  // Whether a DataChannel m=application section has been created.\n  _hasDataChannelMediaSection = false;\n  // Sending DataChannel id value counter. Incremented for each new DataChannel.\n  _nextSendSctpStreamId = 0;\n  // Got transport local and remote parameters.\n  _transportReady = false;\n  /**\r\n   * Creates a factory function.\r\n   */\n  static createFactory() {\n    return () => new Safari11();\n  }\n  constructor() {\n    super();\n  }\n  get name() {\n    return NAME;\n  }\n  close() {\n    logger.debug('close()');\n    // Close RTCPeerConnection.\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n    this.emit('@close');\n  }\n  async getNativeRtpCapabilities() {\n    logger.debug('getNativeRtpCapabilities()');\n    const pc = new RTCPeerConnection({\n      iceServers: [],\n      iceTransportPolicy: 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      sdpSemantics: 'plan-b'\n    });\n    try {\n      const offer = await pc.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true\n      });\n      try {\n        pc.close();\n      } catch (error) {}\n      const sdpObject = sdpTransform.parse(offer.sdp);\n      const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\n        sdpObject\n      });\n      return nativeRtpCapabilities;\n    } catch (error) {\n      try {\n        pc.close();\n      } catch (error2) {}\n      throw error;\n    }\n  }\n  async getNativeSctpCapabilities() {\n    logger.debug('getNativeSctpCapabilities()');\n    return {\n      numStreams: SCTP_NUM_STREAMS\n    };\n  }\n  run({\n    direction,\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    iceServers,\n    iceTransportPolicy,\n    additionalSettings,\n    proprietaryConstraints,\n    extendedRtpCapabilities\n  }) {\n    logger.debug('run()');\n    this._direction = direction;\n    this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n      planB: true\n    });\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n    };\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n      video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n    };\n    if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\n      this._forcedLocalDtlsRole = dtlsParameters.role === 'server' ? 'client' : 'server';\n    }\n    this._pc = new RTCPeerConnection({\n      iceServers: iceServers ?? [],\n      iceTransportPolicy: iceTransportPolicy ?? 'all',\n      bundlePolicy: 'max-bundle',\n      rtcpMuxPolicy: 'require',\n      ...additionalSettings\n    }, proprietaryConstraints);\n    this._pc.addEventListener('icegatheringstatechange', () => {\n      this.emit('@icegatheringstatechange', this._pc.iceGatheringState);\n    });\n    this._pc.addEventListener('icecandidateerror', event => {\n      this.emit('@icecandidateerror', event);\n    });\n    if (this._pc.connectionState) {\n      this._pc.addEventListener('connectionstatechange', () => {\n        this.emit('@connectionstatechange', this._pc.connectionState);\n      });\n    } else {\n      this._pc.addEventListener('iceconnectionstatechange', () => {\n        logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\n        switch (this._pc.iceConnectionState) {\n          case 'checking':\n            {\n              this.emit('@connectionstatechange', 'connecting');\n              break;\n            }\n          case 'connected':\n          case 'completed':\n            {\n              this.emit('@connectionstatechange', 'connected');\n              break;\n            }\n          case 'failed':\n            {\n              this.emit('@connectionstatechange', 'failed');\n              break;\n            }\n          case 'disconnected':\n            {\n              this.emit('@connectionstatechange', 'disconnected');\n              break;\n            }\n          case 'closed':\n            {\n              this.emit('@connectionstatechange', 'closed');\n              break;\n            }\n        }\n      });\n    }\n  }\n  async updateIceServers(iceServers) {\n    logger.debug('updateIceServers()');\n    const configuration = this._pc.getConfiguration();\n    configuration.iceServers = iceServers;\n    this._pc.setConfiguration(configuration);\n  }\n  async restartIce(iceParameters) {\n    logger.debug('restartIce()');\n    // Provide the remote SDP handler with new remote ICE parameters.\n    this._remoteSdp.updateIceParameters(iceParameters);\n    if (!this._transportReady) {\n      return;\n    }\n    if (this._direction === 'send') {\n      const offer = await this._pc.createOffer({\n        iceRestart: true\n      });\n      logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n    } else {\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n    }\n  }\n  async getTransportStats() {\n    return this._pc.getStats();\n  }\n  async send({\n    track,\n    encodings,\n    codecOptions,\n    codec\n  }) {\n    this.assertSendDirection();\n    logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n    if (codec) {\n      logger.warn('send() | codec selection is not available in %s handler', this.name);\n    }\n    this._sendStream.addTrack(track);\n    this._pc.addTrack(track, this._sendStream);\n    let offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    // @ts-expect-error --- sdpTransform.SessionDescription type doesn't\n    // define extmapAllowMixed field.\n    if (localSdpObject.extmapAllowMixed) {\n      this._remoteSdp.setSessionExtmapAllowMixed();\n    }\n    let offerMediaObject;\n    const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\n    sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs);\n    const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n        localSdpObject\n      });\n    }\n    if (track.kind === 'video' && encodings && encodings.length > 1) {\n      logger.debug('send() | enabling simulcast');\n      localSdpObject = sdpTransform.parse(offer.sdp);\n      offerMediaObject = localSdpObject.media.find(m => m.type === 'video');\n      sdpPlanBUtils.addLegacySimulcast({\n        offerMediaObject,\n        track,\n        numStreams: encodings.length\n      });\n      offer = {\n        type: 'offer',\n        sdp: sdpTransform.write(localSdpObject)\n      };\n    }\n    logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\n    await this._pc.setLocalDescription(offer);\n    localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    offerMediaObject = localSdpObject.media.find(m => m.type === track.kind);\n    // Set RTCP CNAME.\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject\n    });\n    // Set RTP encodings.\n    sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({\n      offerMediaObject,\n      track\n    });\n    // Complete encodings with given values.\n    if (encodings) {\n      for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n        if (encodings[idx]) {\n          Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n        }\n      }\n    }\n    // If VP8 and there is effective simulcast, add scalabilityMode to each\n    // encoding.\n    if (sendingRtpParameters.encodings.length > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {\n      for (const encoding of sendingRtpParameters.encodings) {\n        encoding.scalabilityMode = 'L1T3';\n      }\n    }\n    this._remoteSdp.send({\n      offerMediaObject,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions\n    });\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n    const localId = String(this._nextSendLocalId);\n    this._nextSendLocalId++;\n    const rtpSender = this._pc.getSenders().find(s => s.track === track);\n    // Insert into the map.\n    this._mapSendLocalIdRtpSender.set(localId, rtpSender);\n    return {\n      localId: localId,\n      rtpParameters: sendingRtpParameters,\n      rtpSender\n    };\n  }\n  async stopSending(localId) {\n    this.assertSendDirection();\n    const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n    if (!rtpSender) {\n      throw new Error('associated RTCRtpSender not found');\n    }\n    if (rtpSender.track) {\n      this._sendStream.removeTrack(rtpSender.track);\n    }\n    this._mapSendLocalIdRtpSender.delete(localId);\n    const offer = await this._pc.createOffer();\n    logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n    try {\n      await this._pc.setLocalDescription(offer);\n    } catch (error) {\n      // NOTE: If there are no sending tracks, setLocalDescription() will fail with\n      // \"Failed to create channels\". If so, ignore it.\n      if (this._sendStream.getTracks().length === 0) {\n        logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());\n        return;\n      }\n      throw error;\n    }\n    if (this._pc.signalingState === 'stable') {\n      return;\n    }\n    const answer = {\n      type: 'answer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n    await this._pc.setRemoteDescription(answer);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async pauseSending(localId) {\n    // Unimplemented.\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async resumeSending(localId) {\n    // Unimplemented.\n  }\n  async replaceTrack(localId, track) {\n    this.assertSendDirection();\n    if (track) {\n      logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n    } else {\n      logger.debug('replaceTrack() [localId:%s, no track]', localId);\n    }\n    const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n    if (!rtpSender) {\n      throw new Error('associated RTCRtpSender not found');\n    }\n    const oldTrack = rtpSender.track;\n    await rtpSender.replaceTrack(track);\n    // Remove the old track from the local stream.\n    if (oldTrack) {\n      this._sendStream.removeTrack(oldTrack);\n    }\n    // Add the new track to the local stream.\n    if (track) {\n      this._sendStream.addTrack(track);\n    }\n  }\n  async setMaxSpatialLayer(localId, spatialLayer) {\n    this.assertSendDirection();\n    logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\n    const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n    if (!rtpSender) {\n      throw new Error('associated RTCRtpSender not found');\n    }\n    const parameters = rtpSender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      if (idx <= spatialLayer) {\n        encoding.active = true;\n      } else {\n        encoding.active = false;\n      }\n    });\n    await rtpSender.setParameters(parameters);\n  }\n  async setRtpEncodingParameters(localId, params) {\n    this.assertSendDirection();\n    logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\n    const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n    if (!rtpSender) {\n      throw new Error('associated RTCRtpSender not found');\n    }\n    const parameters = rtpSender.getParameters();\n    parameters.encodings.forEach((encoding, idx) => {\n      parameters.encodings[idx] = {\n        ...encoding,\n        ...params\n      };\n    });\n    await rtpSender.setParameters(parameters);\n  }\n  async getSenderStats(localId) {\n    this.assertSendDirection();\n    const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n    if (!rtpSender) {\n      throw new Error('associated RTCRtpSender not found');\n    }\n    return rtpSender.getStats();\n  }\n  async sendDataChannel({\n    ordered,\n    maxPacketLifeTime,\n    maxRetransmits,\n    label,\n    protocol\n  }) {\n    this.assertSendDirection();\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('sendDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // Increase next id.\n    this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n    // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(m => m.type === 'application');\n      if (!this._transportReady) {\n        await this.setupTransport({\n          localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n      await this._pc.setLocalDescription(offer);\n      this._remoteSdp.sendSctpAssociation({\n        offerMediaObject\n      });\n      const answer = {\n        type: 'answer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setRemoteDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    const sctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits\n    };\n    return {\n      dataChannel,\n      sctpStreamParameters\n    };\n  }\n  async receive(optionsList) {\n    this.assertRecvDirection();\n    const results = [];\n    for (const options of optionsList) {\n      const {\n        trackId,\n        kind,\n        rtpParameters,\n        streamId\n      } = options;\n      logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n      const mid = kind;\n      this._remoteSdp.receive({\n        mid,\n        kind,\n        offerRtpParameters: rtpParameters,\n        streamId: streamId ?? rtpParameters.rtcp.cname,\n        trackId\n      });\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    for (const options of optionsList) {\n      const {\n        kind,\n        rtpParameters\n      } = options;\n      const mid = kind;\n      const answerMediaObject = localSdpObject.media.find(m => String(m.mid) === mid);\n      // May need to modify codec parameters in the answer based on codec\n      // parameters in the offer.\n      sdpCommonUtils.applyCodecParameters({\n        offerRtpParameters: rtpParameters,\n        answerMediaObject\n      });\n    }\n    answer = {\n      type: 'answer',\n      sdp: sdpTransform.write(localSdpObject)\n    };\n    if (!this._transportReady) {\n      await this.setupTransport({\n        localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n        localSdpObject\n      });\n    }\n    logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n    for (const options of optionsList) {\n      const {\n        kind,\n        trackId,\n        rtpParameters\n      } = options;\n      const mid = kind;\n      const localId = trackId;\n      const rtpReceiver = this._pc.getReceivers().find(r => r.track && r.track.id === localId);\n      if (!rtpReceiver) {\n        throw new Error('new RTCRtpReceiver not');\n      }\n      // Insert into the map.\n      this._mapRecvLocalIdInfo.set(localId, {\n        mid,\n        rtpParameters,\n        rtpReceiver\n      });\n      results.push({\n        localId,\n        track: rtpReceiver.track,\n        rtpReceiver\n      });\n    }\n    return results;\n  }\n  async stopReceiving(localIds) {\n    this.assertRecvDirection();\n    for (const localId of localIds) {\n      logger.debug('stopReceiving() [localId:%s]', localId);\n      const {\n        mid,\n        rtpParameters\n      } = this._mapRecvLocalIdInfo.get(localId) ?? {};\n      // Remove from the map.\n      this._mapRecvLocalIdInfo.delete(localId);\n      this._remoteSdp.planBStopReceiving({\n        mid: mid,\n        offerRtpParameters: rtpParameters\n      });\n    }\n    const offer = {\n      type: 'offer',\n      sdp: this._remoteSdp.getSdp()\n    };\n    logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n    await this._pc.setRemoteDescription(offer);\n    const answer = await this._pc.createAnswer();\n    logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n    await this._pc.setLocalDescription(answer);\n  }\n  async getReceiverStats(localId) {\n    this.assertRecvDirection();\n    const {\n      rtpReceiver\n    } = this._mapRecvLocalIdInfo.get(localId) ?? {};\n    if (!rtpReceiver) {\n      throw new Error('associated RTCRtpReceiver not found');\n    }\n    return rtpReceiver.getStats();\n  }\n  async pauseReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    // Unimplemented.\n  }\n  async resumeReceiving(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  localIds) {\n    // Unimplemented.\n  }\n  async receiveDataChannel({\n    sctpStreamParameters,\n    label,\n    protocol\n  }) {\n    this.assertRecvDirection();\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits\n    } = sctpStreamParameters;\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol\n    };\n    logger.debug('receiveDataChannel() [options:%o]', options);\n    const dataChannel = this._pc.createDataChannel(label, options);\n    // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp.receiveSctpAssociation({\n        oldDataChannelSpec: true\n      });\n      const offer = {\n        type: 'offer',\n        sdp: this._remoteSdp.getSdp()\n      };\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n      await this._pc.setRemoteDescription(offer);\n      const answer = await this._pc.createAnswer();\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n        await this.setupTransport({\n          localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\n          localSdpObject\n        });\n      }\n      logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n      await this._pc.setLocalDescription(answer);\n      this._hasDataChannelMediaSection = true;\n    }\n    return {\n      dataChannel\n    };\n  }\n  async setupTransport({\n    localDtlsRole,\n    localSdpObject\n  }) {\n    if (!localSdpObject) {\n      localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n    }\n    // Get our local DTLS parameters.\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject\n    });\n    // Set our DTLS role.\n    dtlsParameters.role = localDtlsRole;\n    // Update the remote DTLS role in the SDP.\n    this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\n    // Need to tell the remote transport about our parameters.\n    await new Promise((resolve, reject) => {\n      this.safeEmit('@connect', {\n        dtlsParameters\n      }, resolve, reject);\n    });\n    this._transportReady = true;\n  }\n  assertSendDirection() {\n    if (this._direction !== 'send') {\n      throw new Error('method can just be called for handlers with \"send\" direction');\n    }\n  }\n  assertRecvDirection() {\n    if (this._direction !== 'recv') {\n      throw new Error('method can just be called for handlers with \"recv\" direction');\n    }\n  }\n}\nexports.Safari11 = Safari11;","map":{"version":3,"names":["Object","defineProperty","exports","value","Safari11","sdpTransform","require","Logger_1","utils","ortc","sdpCommonUtils","sdpPlanBUtils","HandlerInterface_1","RemoteSdp_1","logger","Logger","NAME","SCTP_NUM_STREAMS","OS","MIS","HandlerInterface","_direction","_remoteSdp","_sendingRtpParametersByKind","_sendingRemoteRtpParametersByKind","_forcedLocalDtlsRole","_pc","_sendStream","MediaStream","_mapSendLocalIdRtpSender","Map","_nextSendLocalId","_mapRecvLocalIdInfo","_hasDataChannelMediaSection","_nextSendSctpStreamId","_transportReady","createFactory","constructor","name","close","debug","error","emit","getNativeRtpCapabilities","pc","RTCPeerConnection","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","sdpSemantics","offer","createOffer","offerToReceiveAudio","offerToReceiveVideo","sdpObject","parse","sdp","nativeRtpCapabilities","extractRtpCapabilities","error2","getNativeSctpCapabilities","numStreams","run","direction","iceParameters","iceCandidates","dtlsParameters","sctpParameters","additionalSettings","proprietaryConstraints","extendedRtpCapabilities","RemoteSdp","planB","audio","getSendingRtpParameters","video","getSendingRemoteRtpParameters","role","addEventListener","iceGatheringState","event","connectionState","warn","iceConnectionState","updateIceServers","configuration","getConfiguration","setConfiguration","restartIce","updateIceParameters","iceRestart","setLocalDescription","answer","type","getSdp","setRemoteDescription","createAnswer","getTransportStats","getStats","send","track","encodings","codecOptions","codec","assertSendDirection","kind","id","addTrack","localSdpObject","extmapAllowMixed","setSessionExtmapAllowMixed","offerMediaObject","sendingRtpParameters","clone","codecs","reduceCodecs","sendingRemoteRtpParameters","setupTransport","localDtlsRole","length","media","find","m","addLegacySimulcast","write","localDescription","rtcp","cname","getCname","getRtpEncodings","idx","assign","mimeType","toLowerCase","encoding","scalabilityMode","offerRtpParameters","answerRtpParameters","localId","String","rtpSender","getSenders","s","set","rtpParameters","stopSending","get","Error","removeTrack","delete","getTracks","toString","signalingState","pauseSending","resumeSending","replaceTrack","oldTrack","setMaxSpatialLayer","spatialLayer","parameters","getParameters","forEach","active","setParameters","setRtpEncodingParameters","params","getSenderStats","sendDataChannel","ordered","maxPacketLifeTime","maxRetransmits","label","protocol","options","negotiated","dataChannel","createDataChannel","sendSctpAssociation","sctpStreamParameters","streamId","receive","optionsList","assertRecvDirection","results","trackId","mid","answerMediaObject","applyCodecParameters","rtpReceiver","getReceivers","r","push","stopReceiving","localIds","planBStopReceiving","getReceiverStats","pauseReceiving","resumeReceiving","receiveDataChannel","receiveSctpAssociation","oldDataChannelSpec","extractDtlsParameters","updateDtlsRole","Promise","resolve","reject","safeEmit"],"sources":["D:/LECHUAN/NT114/DACN_2/DACN-FE/node_modules/mediasoup-client/lib/handlers/Safari11.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Safari11 = void 0;\r\nconst sdpTransform = require(\"sdp-transform\");\r\nconst Logger_1 = require(\"../Logger\");\r\nconst utils = require(\"../utils\");\r\nconst ortc = require(\"../ortc\");\r\nconst sdpCommonUtils = require(\"./sdp/commonUtils\");\r\nconst sdpPlanBUtils = require(\"./sdp/planBUtils\");\r\nconst HandlerInterface_1 = require(\"./HandlerInterface\");\r\nconst RemoteSdp_1 = require(\"./sdp/RemoteSdp\");\r\nconst logger = new Logger_1.Logger('Safari11');\r\nconst NAME = 'Safari11';\r\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\r\nclass Safari11 extends HandlerInterface_1.HandlerInterface {\r\n    // Handler direction.\r\n    _direction;\r\n    // Remote SDP handler.\r\n    _remoteSdp;\r\n    // Generic sending RTP parameters for audio and video.\r\n    _sendingRtpParametersByKind;\r\n    // Generic sending RTP parameters for audio and video suitable for the SDP\r\n    // remote answer.\r\n    _sendingRemoteRtpParametersByKind;\r\n    // Initial server side DTLS role. If not 'auto', it will force the opposite\r\n    // value in client side.\r\n    _forcedLocalDtlsRole;\r\n    // RTCPeerConnection instance.\r\n    _pc;\r\n    // Local stream for sending.\r\n    _sendStream = new MediaStream();\r\n    // Map of RTCRtpSender indexed by localId.\r\n    _mapSendLocalIdRtpSender = new Map();\r\n    // Next sending localId.\r\n    _nextSendLocalId = 0;\r\n    // Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\r\n    // Value is an Object with mid, rtpParameters and rtpReceiver.\r\n    _mapRecvLocalIdInfo = new Map();\r\n    // Whether a DataChannel m=application section has been created.\r\n    _hasDataChannelMediaSection = false;\r\n    // Sending DataChannel id value counter. Incremented for each new DataChannel.\r\n    _nextSendSctpStreamId = 0;\r\n    // Got transport local and remote parameters.\r\n    _transportReady = false;\r\n    /**\r\n     * Creates a factory function.\r\n     */\r\n    static createFactory() {\r\n        return () => new Safari11();\r\n    }\r\n    constructor() {\r\n        super();\r\n    }\r\n    get name() {\r\n        return NAME;\r\n    }\r\n    close() {\r\n        logger.debug('close()');\r\n        // Close RTCPeerConnection.\r\n        if (this._pc) {\r\n            try {\r\n                this._pc.close();\r\n            }\r\n            catch (error) { }\r\n        }\r\n        this.emit('@close');\r\n    }\r\n    async getNativeRtpCapabilities() {\r\n        logger.debug('getNativeRtpCapabilities()');\r\n        const pc = new RTCPeerConnection({\r\n            iceServers: [],\r\n            iceTransportPolicy: 'all',\r\n            bundlePolicy: 'max-bundle',\r\n            rtcpMuxPolicy: 'require',\r\n            sdpSemantics: 'plan-b',\r\n        });\r\n        try {\r\n            const offer = await pc.createOffer({\r\n                offerToReceiveAudio: true,\r\n                offerToReceiveVideo: true,\r\n            });\r\n            try {\r\n                pc.close();\r\n            }\r\n            catch (error) { }\r\n            const sdpObject = sdpTransform.parse(offer.sdp);\r\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({\r\n                sdpObject,\r\n            });\r\n            return nativeRtpCapabilities;\r\n        }\r\n        catch (error) {\r\n            try {\r\n                pc.close();\r\n            }\r\n            catch (error2) { }\r\n            throw error;\r\n        }\r\n    }\r\n    async getNativeSctpCapabilities() {\r\n        logger.debug('getNativeSctpCapabilities()');\r\n        return {\r\n            numStreams: SCTP_NUM_STREAMS,\r\n        };\r\n    }\r\n    run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities, }) {\r\n        logger.debug('run()');\r\n        this._direction = direction;\r\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\r\n            iceParameters,\r\n            iceCandidates,\r\n            dtlsParameters,\r\n            sctpParameters,\r\n            planB: true,\r\n        });\r\n        this._sendingRtpParametersByKind = {\r\n            audio: ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\r\n            video: ortc.getSendingRtpParameters('video', extendedRtpCapabilities),\r\n        };\r\n        this._sendingRemoteRtpParametersByKind = {\r\n            audio: ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\r\n            video: ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities),\r\n        };\r\n        if (dtlsParameters.role && dtlsParameters.role !== 'auto') {\r\n            this._forcedLocalDtlsRole =\r\n                dtlsParameters.role === 'server' ? 'client' : 'server';\r\n        }\r\n        this._pc = new RTCPeerConnection({\r\n            iceServers: iceServers ?? [],\r\n            iceTransportPolicy: iceTransportPolicy ?? 'all',\r\n            bundlePolicy: 'max-bundle',\r\n            rtcpMuxPolicy: 'require',\r\n            ...additionalSettings,\r\n        }, proprietaryConstraints);\r\n        this._pc.addEventListener('icegatheringstatechange', () => {\r\n            this.emit('@icegatheringstatechange', this._pc.iceGatheringState);\r\n        });\r\n        this._pc.addEventListener('icecandidateerror', (event) => {\r\n            this.emit('@icecandidateerror', event);\r\n        });\r\n        if (this._pc.connectionState) {\r\n            this._pc.addEventListener('connectionstatechange', () => {\r\n                this.emit('@connectionstatechange', this._pc.connectionState);\r\n            });\r\n        }\r\n        else {\r\n            this._pc.addEventListener('iceconnectionstatechange', () => {\r\n                logger.warn('run() | pc.connectionState not supported, using pc.iceConnectionState');\r\n                switch (this._pc.iceConnectionState) {\r\n                    case 'checking': {\r\n                        this.emit('@connectionstatechange', 'connecting');\r\n                        break;\r\n                    }\r\n                    case 'connected':\r\n                    case 'completed': {\r\n                        this.emit('@connectionstatechange', 'connected');\r\n                        break;\r\n                    }\r\n                    case 'failed': {\r\n                        this.emit('@connectionstatechange', 'failed');\r\n                        break;\r\n                    }\r\n                    case 'disconnected': {\r\n                        this.emit('@connectionstatechange', 'disconnected');\r\n                        break;\r\n                    }\r\n                    case 'closed': {\r\n                        this.emit('@connectionstatechange', 'closed');\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    async updateIceServers(iceServers) {\r\n        logger.debug('updateIceServers()');\r\n        const configuration = this._pc.getConfiguration();\r\n        configuration.iceServers = iceServers;\r\n        this._pc.setConfiguration(configuration);\r\n    }\r\n    async restartIce(iceParameters) {\r\n        logger.debug('restartIce()');\r\n        // Provide the remote SDP handler with new remote ICE parameters.\r\n        this._remoteSdp.updateIceParameters(iceParameters);\r\n        if (!this._transportReady) {\r\n            return;\r\n        }\r\n        if (this._direction === 'send') {\r\n            const offer = await this._pc.createOffer({ iceRestart: true });\r\n            logger.debug('restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n            await this._pc.setLocalDescription(offer);\r\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n            await this._pc.setRemoteDescription(answer);\r\n        }\r\n        else {\r\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n            logger.debug('restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n            await this._pc.setRemoteDescription(offer);\r\n            const answer = await this._pc.createAnswer();\r\n            logger.debug('restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\r\n            await this._pc.setLocalDescription(answer);\r\n        }\r\n    }\r\n    async getTransportStats() {\r\n        return this._pc.getStats();\r\n    }\r\n    async send({ track, encodings, codecOptions, codec, }) {\r\n        this.assertSendDirection();\r\n        logger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\r\n        if (codec) {\r\n            logger.warn('send() | codec selection is not available in %s handler', this.name);\r\n        }\r\n        this._sendStream.addTrack(track);\r\n        this._pc.addTrack(track, this._sendStream);\r\n        let offer = await this._pc.createOffer();\r\n        let localSdpObject = sdpTransform.parse(offer.sdp);\r\n        // @ts-expect-error --- sdpTransform.SessionDescription type doesn't\r\n        // define extmapAllowMixed field.\r\n        if (localSdpObject.extmapAllowMixed) {\r\n            this._remoteSdp.setSessionExtmapAllowMixed();\r\n        }\r\n        let offerMediaObject;\r\n        const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind]);\r\n        sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs);\r\n        const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind]);\r\n        sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\r\n        if (!this._transportReady) {\r\n            await this.setupTransport({\r\n                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\r\n                localSdpObject,\r\n            });\r\n        }\r\n        if (track.kind === 'video' && encodings && encodings.length > 1) {\r\n            logger.debug('send() | enabling simulcast');\r\n            localSdpObject = sdpTransform.parse(offer.sdp);\r\n            offerMediaObject = localSdpObject.media.find((m) => m.type === 'video');\r\n            sdpPlanBUtils.addLegacySimulcast({\r\n                offerMediaObject,\r\n                track,\r\n                numStreams: encodings.length,\r\n            });\r\n            offer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\r\n        }\r\n        logger.debug('send() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n        await this._pc.setLocalDescription(offer);\r\n        localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\r\n        offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);\r\n        // Set RTCP CNAME.\r\n        sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\r\n            offerMediaObject,\r\n        });\r\n        // Set RTP encodings.\r\n        sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({\r\n            offerMediaObject,\r\n            track,\r\n        });\r\n        // Complete encodings with given values.\r\n        if (encodings) {\r\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\r\n                if (encodings[idx]) {\r\n                    Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\r\n                }\r\n            }\r\n        }\r\n        // If VP8 and there is effective simulcast, add scalabilityMode to each\r\n        // encoding.\r\n        if (sendingRtpParameters.encodings.length > 1 &&\r\n            sendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8') {\r\n            for (const encoding of sendingRtpParameters.encodings) {\r\n                encoding.scalabilityMode = 'L1T3';\r\n            }\r\n        }\r\n        this._remoteSdp.send({\r\n            offerMediaObject,\r\n            offerRtpParameters: sendingRtpParameters,\r\n            answerRtpParameters: sendingRemoteRtpParameters,\r\n            codecOptions,\r\n        });\r\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('send() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n        await this._pc.setRemoteDescription(answer);\r\n        const localId = String(this._nextSendLocalId);\r\n        this._nextSendLocalId++;\r\n        const rtpSender = this._pc\r\n            .getSenders()\r\n            .find((s) => s.track === track);\r\n        // Insert into the map.\r\n        this._mapSendLocalIdRtpSender.set(localId, rtpSender);\r\n        return {\r\n            localId: localId,\r\n            rtpParameters: sendingRtpParameters,\r\n            rtpSender,\r\n        };\r\n    }\r\n    async stopSending(localId) {\r\n        this.assertSendDirection();\r\n        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\r\n        if (!rtpSender) {\r\n            throw new Error('associated RTCRtpSender not found');\r\n        }\r\n        if (rtpSender.track) {\r\n            this._sendStream.removeTrack(rtpSender.track);\r\n        }\r\n        this._mapSendLocalIdRtpSender.delete(localId);\r\n        const offer = await this._pc.createOffer();\r\n        logger.debug('stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n        try {\r\n            await this._pc.setLocalDescription(offer);\r\n        }\r\n        catch (error) {\r\n            // NOTE: If there are no sending tracks, setLocalDescription() will fail with\r\n            // \"Failed to create channels\". If so, ignore it.\r\n            if (this._sendStream.getTracks().length === 0) {\r\n                logger.warn('stopSending() | ignoring expected error due no sending tracks: %s', error.toString());\r\n                return;\r\n            }\r\n            throw error;\r\n        }\r\n        if (this._pc.signalingState === 'stable') {\r\n            return;\r\n        }\r\n        const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n        await this._pc.setRemoteDescription(answer);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    async pauseSending(localId) {\r\n        // Unimplemented.\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    async resumeSending(localId) {\r\n        // Unimplemented.\r\n    }\r\n    async replaceTrack(localId, track) {\r\n        this.assertSendDirection();\r\n        if (track) {\r\n            logger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\r\n        }\r\n        else {\r\n            logger.debug('replaceTrack() [localId:%s, no track]', localId);\r\n        }\r\n        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\r\n        if (!rtpSender) {\r\n            throw new Error('associated RTCRtpSender not found');\r\n        }\r\n        const oldTrack = rtpSender.track;\r\n        await rtpSender.replaceTrack(track);\r\n        // Remove the old track from the local stream.\r\n        if (oldTrack) {\r\n            this._sendStream.removeTrack(oldTrack);\r\n        }\r\n        // Add the new track to the local stream.\r\n        if (track) {\r\n            this._sendStream.addTrack(track);\r\n        }\r\n    }\r\n    async setMaxSpatialLayer(localId, spatialLayer) {\r\n        this.assertSendDirection();\r\n        logger.debug('setMaxSpatialLayer() [localId:%s, spatialLayer:%s]', localId, spatialLayer);\r\n        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\r\n        if (!rtpSender) {\r\n            throw new Error('associated RTCRtpSender not found');\r\n        }\r\n        const parameters = rtpSender.getParameters();\r\n        parameters.encodings.forEach((encoding, idx) => {\r\n            if (idx <= spatialLayer) {\r\n                encoding.active = true;\r\n            }\r\n            else {\r\n                encoding.active = false;\r\n            }\r\n        });\r\n        await rtpSender.setParameters(parameters);\r\n    }\r\n    async setRtpEncodingParameters(localId, params) {\r\n        this.assertSendDirection();\r\n        logger.debug('setRtpEncodingParameters() [localId:%s, params:%o]', localId, params);\r\n        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\r\n        if (!rtpSender) {\r\n            throw new Error('associated RTCRtpSender not found');\r\n        }\r\n        const parameters = rtpSender.getParameters();\r\n        parameters.encodings.forEach((encoding, idx) => {\r\n            parameters.encodings[idx] = { ...encoding, ...params };\r\n        });\r\n        await rtpSender.setParameters(parameters);\r\n    }\r\n    async getSenderStats(localId) {\r\n        this.assertSendDirection();\r\n        const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\r\n        if (!rtpSender) {\r\n            throw new Error('associated RTCRtpSender not found');\r\n        }\r\n        return rtpSender.getStats();\r\n    }\r\n    async sendDataChannel({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol, }) {\r\n        this.assertSendDirection();\r\n        const options = {\r\n            negotiated: true,\r\n            id: this._nextSendSctpStreamId,\r\n            ordered,\r\n            maxPacketLifeTime,\r\n            maxRetransmits,\r\n            protocol,\r\n        };\r\n        logger.debug('sendDataChannel() [options:%o]', options);\r\n        const dataChannel = this._pc.createDataChannel(label, options);\r\n        // Increase next id.\r\n        this._nextSendSctpStreamId =\r\n            ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\r\n        // If this is the first DataChannel we need to create the SDP answer with\r\n        // m=application section.\r\n        if (!this._hasDataChannelMediaSection) {\r\n            const offer = await this._pc.createOffer();\r\n            const localSdpObject = sdpTransform.parse(offer.sdp);\r\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === 'application');\r\n            if (!this._transportReady) {\r\n                await this.setupTransport({\r\n                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\r\n                    localSdpObject,\r\n                });\r\n            }\r\n            logger.debug('sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\r\n            await this._pc.setLocalDescription(offer);\r\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\r\n            const answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\r\n            logger.debug('sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n            await this._pc.setRemoteDescription(answer);\r\n            this._hasDataChannelMediaSection = true;\r\n        }\r\n        const sctpStreamParameters = {\r\n            streamId: options.id,\r\n            ordered: options.ordered,\r\n            maxPacketLifeTime: options.maxPacketLifeTime,\r\n            maxRetransmits: options.maxRetransmits,\r\n        };\r\n        return { dataChannel, sctpStreamParameters };\r\n    }\r\n    async receive(optionsList) {\r\n        this.assertRecvDirection();\r\n        const results = [];\r\n        for (const options of optionsList) {\r\n            const { trackId, kind, rtpParameters, streamId } = options;\r\n            logger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\r\n            const mid = kind;\r\n            this._remoteSdp.receive({\r\n                mid,\r\n                kind,\r\n                offerRtpParameters: rtpParameters,\r\n                streamId: streamId ?? rtpParameters.rtcp.cname,\r\n                trackId,\r\n            });\r\n        }\r\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n        await this._pc.setRemoteDescription(offer);\r\n        let answer = await this._pc.createAnswer();\r\n        const localSdpObject = sdpTransform.parse(answer.sdp);\r\n        for (const options of optionsList) {\r\n            const { kind, rtpParameters } = options;\r\n            const mid = kind;\r\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === mid);\r\n            // May need to modify codec parameters in the answer based on codec\r\n            // parameters in the offer.\r\n            sdpCommonUtils.applyCodecParameters({\r\n                offerRtpParameters: rtpParameters,\r\n                answerMediaObject,\r\n            });\r\n        }\r\n        answer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\r\n        if (!this._transportReady) {\r\n            await this.setupTransport({\r\n                localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\r\n                localSdpObject,\r\n            });\r\n        }\r\n        logger.debug('receive() | calling pc.setLocalDescription() [answer:%o]', answer);\r\n        await this._pc.setLocalDescription(answer);\r\n        for (const options of optionsList) {\r\n            const { kind, trackId, rtpParameters } = options;\r\n            const mid = kind;\r\n            const localId = trackId;\r\n            const rtpReceiver = this._pc\r\n                .getReceivers()\r\n                .find((r) => r.track && r.track.id === localId);\r\n            if (!rtpReceiver) {\r\n                throw new Error('new RTCRtpReceiver not');\r\n            }\r\n            // Insert into the map.\r\n            this._mapRecvLocalIdInfo.set(localId, {\r\n                mid,\r\n                rtpParameters,\r\n                rtpReceiver,\r\n            });\r\n            results.push({\r\n                localId,\r\n                track: rtpReceiver.track,\r\n                rtpReceiver,\r\n            });\r\n        }\r\n        return results;\r\n    }\r\n    async stopReceiving(localIds) {\r\n        this.assertRecvDirection();\r\n        for (const localId of localIds) {\r\n            logger.debug('stopReceiving() [localId:%s]', localId);\r\n            const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) ?? {};\r\n            // Remove from the map.\r\n            this._mapRecvLocalIdInfo.delete(localId);\r\n            this._remoteSdp.planBStopReceiving({\r\n                mid: mid,\r\n                offerRtpParameters: rtpParameters,\r\n            });\r\n        }\r\n        const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n        logger.debug('stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n        await this._pc.setRemoteDescription(offer);\r\n        const answer = await this._pc.createAnswer();\r\n        logger.debug('stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\r\n        await this._pc.setLocalDescription(answer);\r\n    }\r\n    async getReceiverStats(localId) {\r\n        this.assertRecvDirection();\r\n        const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) ?? {};\r\n        if (!rtpReceiver) {\r\n            throw new Error('associated RTCRtpReceiver not found');\r\n        }\r\n        return rtpReceiver.getStats();\r\n    }\r\n    async pauseReceiving(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    localIds) {\r\n        // Unimplemented.\r\n    }\r\n    async resumeReceiving(\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    localIds) {\r\n        // Unimplemented.\r\n    }\r\n    async receiveDataChannel({ sctpStreamParameters, label, protocol, }) {\r\n        this.assertRecvDirection();\r\n        const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\r\n        const options = {\r\n            negotiated: true,\r\n            id: streamId,\r\n            ordered,\r\n            maxPacketLifeTime,\r\n            maxRetransmits,\r\n            protocol,\r\n        };\r\n        logger.debug('receiveDataChannel() [options:%o]', options);\r\n        const dataChannel = this._pc.createDataChannel(label, options);\r\n        // If this is the first DataChannel we need to create the SDP offer with\r\n        // m=application section.\r\n        if (!this._hasDataChannelMediaSection) {\r\n            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\r\n            const offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\r\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\r\n            await this._pc.setRemoteDescription(offer);\r\n            const answer = await this._pc.createAnswer();\r\n            if (!this._transportReady) {\r\n                const localSdpObject = sdpTransform.parse(answer.sdp);\r\n                await this.setupTransport({\r\n                    localDtlsRole: this._forcedLocalDtlsRole ?? 'client',\r\n                    localSdpObject,\r\n                });\r\n            }\r\n            logger.debug('receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\r\n            await this._pc.setLocalDescription(answer);\r\n            this._hasDataChannelMediaSection = true;\r\n        }\r\n        return { dataChannel };\r\n    }\r\n    async setupTransport({ localDtlsRole, localSdpObject, }) {\r\n        if (!localSdpObject) {\r\n            localSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\r\n        }\r\n        // Get our local DTLS parameters.\r\n        const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\r\n            sdpObject: localSdpObject,\r\n        });\r\n        // Set our DTLS role.\r\n        dtlsParameters.role = localDtlsRole;\r\n        // Update the remote DTLS role in the SDP.\r\n        this._remoteSdp.updateDtlsRole(localDtlsRole === 'client' ? 'server' : 'client');\r\n        // Need to tell the remote transport about our parameters.\r\n        await new Promise((resolve, reject) => {\r\n            this.safeEmit('@connect', { dtlsParameters }, resolve, reject);\r\n        });\r\n        this._transportReady = true;\r\n    }\r\n    assertSendDirection() {\r\n        if (this._direction !== 'send') {\r\n            throw new Error('method can just be called for handlers with \"send\" direction');\r\n        }\r\n    }\r\n    assertRecvDirection() {\r\n        if (this._direction !== 'recv') {\r\n            throw new Error('method can just be called for handlers with \"recv\" direction');\r\n        }\r\n    }\r\n}\r\nexports.Safari11 = Safari11;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}