// Fallback simple implementation for testing
window.mediasoupClient = {
  Device: class {
    constructor() {
      this.rtpCapabilities = null;
    }
    
    async load({ routerRtpCapabilities }) {
      this.rtpCapabilities = routerRtpCapabilities;
      console.log('Device loaded (fallback)');
    }
    
    canProduce(kind) {
      return true;
    }
    
    createSendTransport(params) {
      return {
        id: 'transport-' + Math.random(),
        on: () => {},
        produce: async ({ track }) => {
          console.log('Producing track (fallback):', track.kind);
          return {
            id: 'producer-' + Math.random(),
            close: () => {}
          };
        }
      };
    }
    
    createRecvTransport(params) {
      return {
        id: 'transport-' + Math.random(),
        on: () => {},
        consume: async (params) => {
          console.log('Consuming track (fallback)');
          // Create fake video track for testing
          const canvas = document.createElement('canvas');
          canvas.width = 640;
          canvas.height = 480;
          const ctx = canvas.getContext('2d');
          ctx.fillStyle = '#333';
          ctx.fillRect(0, 0, 640, 480);
          ctx.fillStyle = '#fff';
          ctx.font = '20px Arial';
          ctx.fillText('Remote Video (Test)', 200, 240);
          
          const stream = canvas.captureStream(30);
          const track = stream.getVideoTracks()[0];
          
          return {
            id: 'consumer-' + Math.random(),
            track: track,
            producerId: params.producerId,
            close: () => {},
            resume: async () => {}
          };
        }
      };
    }
  }
};